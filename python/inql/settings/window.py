# coding: utf-8
from ..config import config
from ..logger import log
from ..utils.pyswing import (CheckBox, ComboBox, Spinner, TextArea, box_space_v, box_v,
                             label, multiline_label, panel, scrollable, separator, window)


class InQLSettingsWindow(object):

    def __init__(self):
        """Creates a new window with InQL settings."""

        log.debug("Creating InQL settings window...")

        # Create the window with two tabs
        self.window = window(
            "InQL Settings",
            self.create_inql_settings_tab()
        )

    def create_inql_settings_tab(self):
        """A tab "InQL Settings" with all the settings for InQL."""

        return self._build_tab_from_sections([
            self.create_code_generation_section(),
            self.create_reports_section(),
            self.create_points_of_interest_section(),
            self.create_logging_level_section()
        ])

    def _build_tab_from_sections(self, sections):
        """Build a tab from a list of sections."""

        if not sections:
            return panel()

        # Add separators between sections
        elements = [sections[0]]
        for section in sections[1:]:
            elements.append(separator())
            elements.append(section)
        boxed = box_v(elements, gap=0)

        # Add a margin on the left and right
        padded = panel((0, 20), boxed)

        # Make the tab scrollable
        return scrollable(padded)

    def _build_section(self, title, description, elements):
        """Build a section with a title and a description."""

        log.debug("Building section '%s'...", title)
        log.debug("Section description: %s", description)
        log.debug("Section elements: %s (type: %s)", elements, type(elements))

        # Process the elements
        elements = [self._build_element(*element) if element is not None else box_space_v(10) for element in elements]

        # Don't leave any gaps between the elements vertically, but add margins on the left and right
        padded = panel((0, 10), box_v(elements, gap=0))

        # Leave a small gap between title, description and the elements
        boxed = box_v([
            label(title, big=True),
            label(description),
            padded
        ], gap=10)

        # Add margin around the section
        return panel(10, boxed)

    def _build_element(self, key, element):
        """Build a single element."""

        # Get the value from the config
        value = config.get(key, scope="effective_global")
        element._set_value(value)

        # Add the action handler to the element
        handler = self._save_config(key)
        element._action_handler = handler

        return element.render()

    def _save_config(self, key):
        """Returns a function that saves the config value for the given key."""
        def __save_config(element):
            log.debug("Saving config value for key '%s'...", key)

            # Read the value from the element
            value = element.get_value()
            log.debug("Read value from element: %s (type: %s)", value, type(value))

            # Save the value in the config
            config.set(key, value, scope="global")

            log.debug("Saved config value for key '%s': %s", key, value)
        return __save_config

    def create_code_generation_section(self):
        """Code generation settings."""

        return self._build_section(
            "Code generation settings",
            "Use these settings to configure how the code generated by InQL will look like.",
            (
                ('codegen.depth', Spinner("Maximum depth of the generated queries")),
                ('codegen.pad', Spinner("Number of whitespaces to use for indentation"))
            ))

    def create_reports_section(self):
        """Settings for additional reports that InQL can generate."""

        return self._build_section(
            "Additional GraphQL reports",
            "Use these settings to configure additional reports generated by InQL.",
            (
                ('report.introspection', CheckBox("Dump introspection schema in JSON format")),
                ('report.sdl', CheckBox("Dump GraphQL schema in SDL format (not implemented yet)", disabled=True)),
                ('report.cycles', CheckBox("Test schema for cycles and report findings (not implemented yet)", disabled=True))
            ))

    def create_points_of_interest_section(self):
        """Settings for points of interest scan and reporting."""

        return self._build_section(
            "Points of interest",
            "Use these settings to configure how InQL will handle points of interest.",
            (
                ('report.poi', CheckBox("Enable points of interest")),
                None,
                ('report.poi.depth', Spinner("Maximum depth of the generated queries")),
                ('report.poi.format', ComboBox("Format of the generated queries", items=["text", "json", "both"])),
                None,
                ('report.poi.auth', CheckBox("Report points of interest that deal with authentication")),
                ('report.poi.privileged', CheckBox("Report points of interest that require or provide privileged access")),
                ('report.poi.pii', CheckBox("Report points of interest that might contain or process PII")),
                ('report.poi.payment', CheckBox("Report points of interest that might contain or process payment information")),
                ('report.poi.database', CheckBox("Report points of interest that might allow direct database access")),
                ('report.poi.debugging', CheckBox("Report points of interest that expose debugging information")),
                ('report.poi.files', CheckBox("Report points of interest that deal with file management")),
                ('report.poi.deprecated', CheckBox("Report deprecated functionality")),
                ('report.poi.custom_scalars', CheckBox("Report custom scalars")),
                None,
                ('report.poi.custom_keywords', TextArea("Custom keywords for points of interest", size=[20, 6])),
            ))

    def create_logging_level_section(self):
        """Settings for the logging level and debug options."""

        return self._build_section(
            "Logging options",
            "Use these settings to configure the logging level of the extension.",
            (
                ('logging.level', ComboBox("Logging level", items=["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"])),
            ))

    def setVisible(self, visible=True):
        """Show or hide the window."""
        self.window.setVisible(visible)
